// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/domain/entities/movie.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 7231653952610362674),
      name: 'MovieEntity',
      lastPropertyId: const IdUid(8, 949565164455919085),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8180011601914527589),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8306957788034613781),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2523030234273944604),
            name: 'posterUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4604457134828916260),
            name: 'backdropUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8787883914469423001),
            name: 'releaseDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1009741193904050828),
            name: 'overview',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1643943851670742106),
            name: 'voteAverage',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 949565164455919085),
            name: 'voteCount',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 7231653952610362674),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [5938796970313180388],
      retiredIndexUids: const [],
      retiredPropertyUids: const [6571557327569065140],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    MovieEntity: EntityDefinition<MovieEntity>(
        model: _entities[0],
        toOneRelations: (MovieEntity object) => [],
        toManyRelations: (MovieEntity object) => {},
        getId: (MovieEntity object) => object.id,
        setId: (MovieEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MovieEntity object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final posterUrlOffset = fbb.writeString(object.posterUrl);
          final backdropUrlOffset = fbb.writeString(object.backdropUrl);
          final overviewOffset = fbb.writeString(object.overview);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, posterUrlOffset);
          fbb.addOffset(3, backdropUrlOffset);
          fbb.addInt64(4, object.releaseDate?.millisecondsSinceEpoch);
          fbb.addOffset(5, overviewOffset);
          fbb.addFloat64(6, object.voteAverage);
          fbb.addInt64(7, object.voteCount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final releaseDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final posterUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final backdropUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final releaseDateParam = releaseDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(releaseDateValue);
          final overviewParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final voteAverageParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final voteCountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = MovieEntity(
              id: idParam,
              title: titleParam,
              posterUrl: posterUrlParam,
              backdropUrl: backdropUrlParam,
              releaseDate: releaseDateParam,
              overview: overviewParam,
              voteAverage: voteAverageParam,
              voteCount: voteCountParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [MovieEntity] entity fields to define ObjectBox queries.
class MovieEntity_ {
  /// see [MovieEntity.id]
  static final id =
      QueryIntegerProperty<MovieEntity>(_entities[0].properties[0]);

  /// see [MovieEntity.title]
  static final title =
      QueryStringProperty<MovieEntity>(_entities[0].properties[1]);

  /// see [MovieEntity.posterUrl]
  static final posterUrl =
      QueryStringProperty<MovieEntity>(_entities[0].properties[2]);

  /// see [MovieEntity.backdropUrl]
  static final backdropUrl =
      QueryStringProperty<MovieEntity>(_entities[0].properties[3]);

  /// see [MovieEntity.releaseDate]
  static final releaseDate =
      QueryIntegerProperty<MovieEntity>(_entities[0].properties[4]);

  /// see [MovieEntity.overview]
  static final overview =
      QueryStringProperty<MovieEntity>(_entities[0].properties[5]);

  /// see [MovieEntity.voteAverage]
  static final voteAverage =
      QueryDoubleProperty<MovieEntity>(_entities[0].properties[6]);

  /// see [MovieEntity.voteCount]
  static final voteCount =
      QueryIntegerProperty<MovieEntity>(_entities[0].properties[7]);
}
